
KEYPAD_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000cf0  00000d84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007e  0080007e  00000da2  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000037f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e81  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d0  00000000  00000000  00004779  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000963  00000000  00000000  00004c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000055ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025f  00000000  00000000  000056d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000511  00000000  00000000  00005937  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e7       	ldi	r26, 0x7E	; 126
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 02 	call	0x5ea	; 0x5ea <main>
  8a:	0c 94 76 06 	jmp	0xcec	; 0xcec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_init>:
        

 
 
void keypad_init(){
	KEYPAD_INIT_PORT;
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	81 bb       	out	0x11, r24	; 17
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	82 bb       	out	0x12, r24	; 18
}
  9a:	08 95       	ret

0000009c <keypad_read>:

		 
uint8_t keypad_read(){
	
	PORTD = 0b11101111;
  9c:	8f ee       	ldi	r24, 0xEF	; 239
  9e:	82 bb       	out	0x12, r24	; 18
	for (i=0;i<4;i++)
  a0:	10 92 7f 00 	sts	0x007F, r1
	{if(READBIT(PIND,i)==0) return keypad_matrix[i];
  a4:	80 99       	sbic	0x10, 0	; 16
  a6:	ae c0       	rjmp	.+348    	; 0x204 <keypad_read+0x168>
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <keypad_read+0x26>
  aa:	40 b3       	in	r20, 0x10	; 16
  ac:	9c 01       	movw	r18, r24
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	08 2e       	mov	r0, r24
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <keypad_read+0x1c>
  b4:	55 95       	asr	r21
  b6:	47 95       	ror	r20
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <keypad_read+0x18>
  bc:	40 fd       	sbrc	r20, 0
  be:	08 c0       	rjmp	.+16     	; 0xd0 <keypad_read+0x34>
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <keypad_read+0x2a>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	2e 59       	subi	r18, 0x9E	; 158
  c8:	3f 4f       	sbci	r19, 0xFF	; 255
  ca:	f9 01       	movw	r30, r18
  cc:	80 81       	ld	r24, Z
  ce:	08 95       	ret
void keypad_init(){
	KEYPAD_INIT_PORT;
}

		 
uint8_t keypad_read(){
  d0:	28 2f       	mov	r18, r24
  d2:	2f 5f       	subi	r18, 0xFF	; 255
	
	PORTD = 0b11101111;
	for (i=0;i<4;i++)
  d4:	20 93 7f 00 	sts	0x007F, r18
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	84 30       	cpi	r24, 0x04	; 4
  dc:	91 05       	cpc	r25, r1
  de:	29 f7       	brne	.-54     	; 0xaa <keypad_read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	87 eb       	ldi	r24, 0xB7	; 183
  e2:	9b e0       	ldi	r25, 0x0B	; 11
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <keypad_read+0x48>
  e8:	00 c0       	rjmp	.+0      	; 0xea <keypad_read+0x4e>
  ea:	00 00       	nop
	{if(READBIT(PIND,i)==0) return keypad_matrix[i];
	}
	_delay_ms(1);
	PORTD = 0b11011111;
  ec:	8f ed       	ldi	r24, 0xDF	; 223
  ee:	82 bb       	out	0x12, r24	; 18
	for (i=0;i<4;i++)
  f0:	10 92 7f 00 	sts	0x007F, r1
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+4];
  f4:	80 99       	sbic	0x10, 0	; 16
  f6:	80 c0       	rjmp	.+256    	; 0x1f8 <keypad_read+0x15c>
  f8:	0c c0       	rjmp	.+24     	; 0x112 <keypad_read+0x76>
  fa:	40 b3       	in	r20, 0x10	; 16
  fc:	9c 01       	movw	r18, r24
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	08 2e       	mov	r0, r24
 102:	02 c0       	rjmp	.+4      	; 0x108 <keypad_read+0x6c>
 104:	55 95       	asr	r21
 106:	47 95       	ror	r20
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <keypad_read+0x68>
 10c:	40 fd       	sbrc	r20, 0
 10e:	08 c0       	rjmp	.+16     	; 0x120 <keypad_read+0x84>
 110:	02 c0       	rjmp	.+4      	; 0x116 <keypad_read+0x7a>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	2e 59       	subi	r18, 0x9E	; 158
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	f9 01       	movw	r30, r18
 11c:	84 81       	ldd	r24, Z+4	; 0x04
 11e:	08 95       	ret
void keypad_init(){
	KEYPAD_INIT_PORT;
}

		 
uint8_t keypad_read(){
 120:	28 2f       	mov	r18, r24
 122:	2f 5f       	subi	r18, 0xFF	; 255
	for (i=0;i<4;i++)
	{if(READBIT(PIND,i)==0) return keypad_matrix[i];
	}
	_delay_ms(1);
	PORTD = 0b11011111;
	for (i=0;i<4;i++)
 124:	20 93 7f 00 	sts	0x007F, r18
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	91 05       	cpc	r25, r1
 12e:	29 f7       	brne	.-54     	; 0xfa <keypad_read+0x5e>
 130:	87 eb       	ldi	r24, 0xB7	; 183
 132:	9b e0       	ldi	r25, 0x0B	; 11
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <keypad_read+0x98>
 138:	00 c0       	rjmp	.+0      	; 0x13a <keypad_read+0x9e>
 13a:	00 00       	nop
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+4];
	}
	_delay_ms(1);
	PORTD = 0b10111111;
 13c:	8f eb       	ldi	r24, 0xBF	; 191
 13e:	82 bb       	out	0x12, r24	; 18
	for (i=0;i<4;i++)
 140:	10 92 7f 00 	sts	0x007F, r1
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+8];
 144:	80 99       	sbic	0x10, 0	; 16
 146:	52 c0       	rjmp	.+164    	; 0x1ec <keypad_read+0x150>
 148:	0c c0       	rjmp	.+24     	; 0x162 <keypad_read+0xc6>
 14a:	40 b3       	in	r20, 0x10	; 16
 14c:	9c 01       	movw	r18, r24
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	08 2e       	mov	r0, r24
 152:	02 c0       	rjmp	.+4      	; 0x158 <keypad_read+0xbc>
 154:	55 95       	asr	r21
 156:	47 95       	ror	r20
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <keypad_read+0xb8>
 15c:	40 fd       	sbrc	r20, 0
 15e:	08 c0       	rjmp	.+16     	; 0x170 <keypad_read+0xd4>
 160:	02 c0       	rjmp	.+4      	; 0x166 <keypad_read+0xca>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	2e 59       	subi	r18, 0x9E	; 158
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	f9 01       	movw	r30, r18
 16c:	80 85       	ldd	r24, Z+8	; 0x08
 16e:	08 95       	ret
void keypad_init(){
	KEYPAD_INIT_PORT;
}

		 
uint8_t keypad_read(){
 170:	28 2f       	mov	r18, r24
 172:	2f 5f       	subi	r18, 0xFF	; 255
	for (i=0;i<4;i++)
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+4];
	}
	_delay_ms(1);
	PORTD = 0b10111111;
	for (i=0;i<4;i++)
 174:	20 93 7f 00 	sts	0x007F, r18
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	84 30       	cpi	r24, 0x04	; 4
 17c:	91 05       	cpc	r25, r1
 17e:	29 f7       	brne	.-54     	; 0x14a <keypad_read+0xae>
 180:	87 eb       	ldi	r24, 0xB7	; 183
 182:	9b e0       	ldi	r25, 0x0B	; 11
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <keypad_read+0xe8>
 188:	00 c0       	rjmp	.+0      	; 0x18a <keypad_read+0xee>
 18a:	00 00       	nop
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+8];
	}
	_delay_ms(1);
	PORTD = 0b01111111;
 18c:	8f e7       	ldi	r24, 0x7F	; 127
 18e:	82 bb       	out	0x12, r24	; 18
	for (i=0;i<4;i++)
 190:	10 92 7f 00 	sts	0x007F, r1
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+12];
 194:	80 99       	sbic	0x10, 0	; 16
 196:	24 c0       	rjmp	.+72     	; 0x1e0 <keypad_read+0x144>
 198:	0c c0       	rjmp	.+24     	; 0x1b2 <keypad_read+0x116>
 19a:	40 b3       	in	r20, 0x10	; 16
 19c:	9c 01       	movw	r18, r24
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	08 2e       	mov	r0, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <keypad_read+0x10c>
 1a4:	55 95       	asr	r21
 1a6:	47 95       	ror	r20
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <keypad_read+0x108>
 1ac:	40 fd       	sbrc	r20, 0
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <keypad_read+0x124>
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <keypad_read+0x11a>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	2e 59       	subi	r18, 0x9E	; 158
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	f9 01       	movw	r30, r18
 1bc:	84 85       	ldd	r24, Z+12	; 0x0c
 1be:	08 95       	ret
void keypad_init(){
	KEYPAD_INIT_PORT;
}

		 
uint8_t keypad_read(){
 1c0:	28 2f       	mov	r18, r24
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
	for (i=0;i<4;i++)
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+8];
	}
	_delay_ms(1);
	PORTD = 0b01111111;
	for (i=0;i<4;i++)
 1c4:	20 93 7f 00 	sts	0x007F, r18
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	91 05       	cpc	r25, r1
 1ce:	29 f7       	brne	.-54     	; 0x19a <keypad_read+0xfe>
 1d0:	87 eb       	ldi	r24, 0xB7	; 183
 1d2:	9b e0       	ldi	r25, 0x0B	; 11
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <keypad_read+0x138>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <keypad_read+0x13e>
 1da:	00 00       	nop
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+12];
	}
	_delay_ms(1);
	return 0;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
}
 1de:	08 95       	ret
	for (i=0;i<4;i++)
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+8];
	}
	_delay_ms(1);
	PORTD = 0b01111111;
	for (i=0;i<4;i++)
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 7f 00 	sts	0x007F, r24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	d7 cf       	rjmp	.-82     	; 0x19a <keypad_read+0xfe>
	for (i=0;i<4;i++)
	{if(READBIT(PIND,i)==0) return keypad_matrix[i+4];
	}
	_delay_ms(1);
	PORTD = 0b10111111;
	for (i=0;i<4;i++)
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 7f 00 	sts	0x007F, r24
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	a9 cf       	rjmp	.-174    	; 0x14a <keypad_read+0xae>
	for (i=0;i<4;i++)
	{if(READBIT(PIND,i)==0) return keypad_matrix[i];
	}
	_delay_ms(1);
	PORTD = 0b11011111;
	for (i=0;i<4;i++)
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 7f 00 	sts	0x007F, r24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	7b cf       	rjmp	.-266    	; 0xfa <keypad_read+0x5e>

		 
uint8_t keypad_read(){
	
	PORTD = 0b11101111;
	for (i=0;i<4;i++)
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 7f 00 	sts	0x007F, r24
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	4d cf       	rjmp	.-358    	; 0xaa <keypad_read+0xe>

00000210 <calculator>:

		return output+48 ;

}

char calculator(uint8_t *p_matrix){
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	fc 01       	movw	r30, r24
	
	 float out1_float ;
	
	switch (*(p_matrix+1)){
 222:	81 81       	ldd	r24, Z+1	; 0x01
 224:	8b 32       	cpi	r24, 0x2B	; 43
 226:	09 f4       	brne	.+2      	; 0x22a <calculator+0x1a>
 228:	8b c0       	rjmp	.+278    	; 0x340 <calculator+0x130>
 22a:	8c 32       	cpi	r24, 0x2C	; 44
 22c:	20 f4       	brcc	.+8      	; 0x236 <calculator+0x26>
 22e:	8a 32       	cpi	r24, 0x2A	; 42
 230:	09 f0       	breq	.+2      	; 0x234 <calculator+0x24>
 232:	8b c0       	rjmp	.+278    	; 0x34a <calculator+0x13a>
 234:	6e c0       	rjmp	.+220    	; 0x312 <calculator+0x102>
 236:	8d 32       	cpi	r24, 0x2D	; 45
 238:	09 f4       	brne	.+2      	; 0x23c <calculator+0x2c>
 23a:	73 c0       	rjmp	.+230    	; 0x322 <calculator+0x112>
 23c:	8f 32       	cpi	r24, 0x2F	; 47
 23e:	09 f0       	breq	.+2      	; 0x242 <calculator+0x32>
 240:	84 c0       	rjmp	.+264    	; 0x34a <calculator+0x13a>
	case '/' :
	if(0==(*(p_matrix+2)))
 242:	c2 81       	ldd	r28, Z+2	; 0x02
 244:	cc 23       	and	r28, r28
 246:	21 f4       	brne	.+8      	; 0x250 <calculator+0x40>
	wrong_val=1 ;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 85 00 	sts	0x0085, r24
 24e:	7d c0       	rjmp	.+250    	; 0x34a <calculator+0x13a>
	else{
	if( (*(p_matrix))%(*(p_matrix+2)) !=0)
 250:	20 81       	ld	r18, Z
 252:	82 2f       	mov	r24, r18
 254:	6c 2f       	mov	r22, r28
 256:	0e 94 56 06 	call	0xcac	; 0xcac <__udivmodqi4>
 25a:	99 23       	and	r25, r25
 25c:	09 f4       	brne	.+2      	; 0x260 <calculator+0x50>
 25e:	52 c0       	rjmp	.+164    	; 0x304 <calculator+0xf4>
	{
		flag_float=1 ;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 88 00 	sts	0x0088, r24
		out1_float= (float) (*(p_matrix))/(*(p_matrix+2));
 266:	60 81       	ld	r22, Z
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__floatunsisf>
 272:	6b 01       	movw	r12, r22
 274:	7c 01       	movw	r14, r24
 276:	6c 2f       	mov	r22, r28
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__floatsisf>
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	c7 01       	movw	r24, r14
 288:	b6 01       	movw	r22, r12
 28a:	0e 94 a9 04 	call	0x952	; 0x952 <__divsf3>
 28e:	06 2f       	mov	r16, r22
 290:	17 2f       	mov	r17, r23
 292:	d8 2f       	mov	r29, r24
 294:	c9 2f       	mov	r28, r25
 296:	e6 2e       	mov	r14, r22
 298:	f7 2e       	mov	r15, r23
 29a:	d8 2e       	mov	r13, r24
 29c:	c9 2e       	mov	r12, r25
		if(out1_float>1){
 29e:	86 2f       	mov	r24, r22
 2a0:	91 2f       	mov	r25, r17
 2a2:	ad 2f       	mov	r26, r29
 2a4:	bc 2f       	mov	r27, r28
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	5f e3       	ldi	r21, 0x3F	; 63
 2b2:	0e 94 cb 05 	call	0xb96	; 0xb96 <__gesf2>
 2b6:	18 16       	cp	r1, r24
 2b8:	a4 f4       	brge	.+40     	; 0x2e2 <calculator+0xd2>
		out1_float=out1_float-1;
 2ba:	80 2f       	mov	r24, r16
 2bc:	91 2f       	mov	r25, r17
 2be:	ad 2f       	mov	r26, r29
 2c0:	bc 2f       	mov	r27, r28
 2c2:	bc 01       	movw	r22, r24
 2c4:	cd 01       	movw	r24, r26
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e8       	ldi	r20, 0x80	; 128
 2cc:	5f e3       	ldi	r21, 0x3F	; 63
 2ce:	0e 94 44 04 	call	0x888	; 0x888 <__subsf3>
 2d2:	e6 2e       	mov	r14, r22
 2d4:	f7 2e       	mov	r15, r23
 2d6:	d8 2e       	mov	r13, r24
 2d8:	c9 2e       	mov	r12, r25
		lcd_write_cmd_char(49,1);
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
		}		
		out1_float=out1_float*100;
 2e2:	8e 2d       	mov	r24, r14
 2e4:	9f 2d       	mov	r25, r15
 2e6:	ad 2d       	mov	r26, r13
 2e8:	bc 2d       	mov	r27, r12
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	20 e0       	ldi	r18, 0x00	; 0
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	48 ec       	ldi	r20, 0xC8	; 200
 2f4:	52 e4       	ldi	r21, 0x42	; 66
 2f6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__mulsf3>
		out_calc=out1_float;
 2fa:	0e 94 11 05 	call	0xa22	; 0xa22 <__fixunssfsi>
 2fe:	60 93 89 00 	sts	0x0089, r22
 302:	23 c0       	rjmp	.+70     	; 0x34a <calculator+0x13a>
		
	}
	else{
		
	 out_calc = (*(p_matrix))/(*(p_matrix+2)) ;
 304:	82 2f       	mov	r24, r18
 306:	6c 2f       	mov	r22, r28
 308:	0e 94 56 06 	call	0xcac	; 0xcac <__udivmodqi4>
 30c:	80 93 89 00 	sts	0x0089, r24
 310:	1c c0       	rjmp	.+56     	; 0x34a <calculator+0x13a>
	}	
	
	break;
	
	case '*' :
	out_calc =  ( (*(p_matrix))*(*(p_matrix+2)) );
 312:	92 81       	ldd	r25, Z+2	; 0x02
 314:	80 81       	ld	r24, Z
 316:	98 9f       	mul	r25, r24
 318:	80 2d       	mov	r24, r0
 31a:	11 24       	eor	r1, r1
 31c:	80 93 89 00 	sts	0x0089, r24
	break;
 320:	14 c0       	rjmp	.+40     	; 0x34a <calculator+0x13a>
	
	case '-' :
	if( (*(p_matrix+2)) > (*(p_matrix))){
 322:	82 81       	ldd	r24, Z+2	; 0x02
 324:	90 81       	ld	r25, Z
 326:	98 17       	cp	r25, r24
 328:	38 f4       	brcc	.+14     	; 0x338 <calculator+0x128>
		out_calc = ( (*(p_matrix+2)) - (*(p_matrix)) );
 32a:	89 1b       	sub	r24, r25
 32c:	80 93 89 00 	sts	0x0089, r24
		flag_neg=1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 8f 00 	sts	0x008F, r24
 336:	09 c0       	rjmp	.+18     	; 0x34a <calculator+0x13a>
	}
	else{
	out_calc = ( (*(p_matrix))-(*(p_matrix+2)) );
 338:	98 1b       	sub	r25, r24
 33a:	90 93 89 00 	sts	0x0089, r25
 33e:	05 c0       	rjmp	.+10     	; 0x34a <calculator+0x13a>
	}	
	
	break;
	
	case '+' :
	out_calc = ( (*(p_matrix))+(*(p_matrix+2)) );	
 340:	92 81       	ldd	r25, Z+2	; 0x02
 342:	80 81       	ld	r24, Z
 344:	89 0f       	add	r24, r25
 346:	80 93 89 00 	sts	0x0089, r24
	break ;
} 
	flag_error=0; 	
 34a:	10 92 83 00 	sts	0x0083, r1
	return out_calc;
	}
 34e:	80 91 89 00 	lds	r24, 0x0089
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	08 95       	ret

00000364 <calc_func>:
	}
	_delay_ms(1);
	return 0;
}

uint8_t calc_func(uint8_t data)  {
 364:	cf 93       	push	r28
		if(flage_2nd !=1)
 366:	90 91 81 00 	lds	r25, 0x0081
 36a:	91 30       	cpi	r25, 0x01	; 1
 36c:	41 f0       	breq	.+16     	; 0x37e <calc_func+0x1a>
		 wrong_val=1;	
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	90 93 85 00 	sts	0x0085, r25
			
			return	(char) (calculator(p)+48);
		}
		
	
	if(0==flag_number)	
 374:	90 91 7e 00 	lds	r25, 0x007E
 378:	99 23       	and	r25, r25
 37a:	91 f0       	breq	.+36     	; 0x3a0 <calc_func+0x3c>
 37c:	73 c0       	rjmp	.+230    	; 0x464 <calc_func+0x100>
		 wrong_val=1;	
	
		if(flage_2nd==1)
		{
			
			new_output=1 ;
 37e:	c1 e0       	ldi	r28, 0x01	; 1
 380:	c0 93 87 00 	sts	0x0087, r28
			lcd_write_cmd_char('=',1);
 384:	8d e3       	ldi	r24, 0x3D	; 61
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
			
			clear_all=1 ;
 38c:	c0 93 80 00 	sts	0x0080, r28
			
			return	(char) (calculator(p)+48);
 390:	80 91 60 00 	lds	r24, 0x0060
 394:	90 91 61 00 	lds	r25, 0x0061
 398:	0e 94 08 01 	call	0x210	; 0x210 <calculator>
 39c:	80 5d       	subi	r24, 0xD0	; 208
 39e:	14 c1       	rjmp	.+552    	; 0x5c8 <calc_func+0x264>
		}
		
	
	if(0==flag_number)	
	{
		switch(data)	
 3a0:	84 33       	cpi	r24, 0x34	; 52
 3a2:	b1 f1       	breq	.+108    	; 0x410 <calc_func+0xac>
 3a4:	85 33       	cpi	r24, 0x35	; 53
 3a6:	70 f4       	brcc	.+28     	; 0x3c4 <calc_func+0x60>
 3a8:	81 33       	cpi	r24, 0x31	; 49
 3aa:	01 f1       	breq	.+64     	; 0x3ec <calc_func+0x88>
 3ac:	82 33       	cpi	r24, 0x32	; 50
 3ae:	20 f4       	brcc	.+8      	; 0x3b8 <calc_func+0x54>
 3b0:	80 33       	cpi	r24, 0x30	; 48
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <calc_func+0x52>
 3b4:	50 c0       	rjmp	.+160    	; 0x456 <calc_func+0xf2>
 3b6:	15 c0       	rjmp	.+42     	; 0x3e2 <calc_func+0x7e>
 3b8:	82 33       	cpi	r24, 0x32	; 50
 3ba:	f1 f0       	breq	.+60     	; 0x3f8 <calc_func+0x94>
 3bc:	83 33       	cpi	r24, 0x33	; 51
 3be:	09 f0       	breq	.+2      	; 0x3c2 <calc_func+0x5e>
 3c0:	4a c0       	rjmp	.+148    	; 0x456 <calc_func+0xf2>
 3c2:	20 c0       	rjmp	.+64     	; 0x404 <calc_func+0xa0>
 3c4:	87 33       	cpi	r24, 0x37	; 55
 3c6:	b1 f1       	breq	.+108    	; 0x434 <calc_func+0xd0>
 3c8:	88 33       	cpi	r24, 0x38	; 56
 3ca:	30 f4       	brcc	.+12     	; 0x3d8 <calc_func+0x74>
 3cc:	85 33       	cpi	r24, 0x35	; 53
 3ce:	31 f1       	breq	.+76     	; 0x41c <calc_func+0xb8>
 3d0:	86 33       	cpi	r24, 0x36	; 54
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <calc_func+0x72>
 3d4:	40 c0       	rjmp	.+128    	; 0x456 <calc_func+0xf2>
 3d6:	28 c0       	rjmp	.+80     	; 0x428 <calc_func+0xc4>
 3d8:	88 33       	cpi	r24, 0x38	; 56
 3da:	91 f1       	breq	.+100    	; 0x440 <calc_func+0xdc>
 3dc:	89 33       	cpi	r24, 0x39	; 57
 3de:	d9 f5       	brne	.+118    	; 0x456 <calc_func+0xf2>
 3e0:	35 c0       	rjmp	.+106    	; 0x44c <calc_func+0xe8>
		{
	
			case '0' : 
			data_matrix[0]= 0 ;
 3e2:	10 92 8b 00 	sts	0x008B, r1
			wrong_val=0;
 3e6:	10 92 85 00 	sts	0x0085, r1
	break; 
 3ea:	35 c0       	rjmp	.+106    	; 0x456 <calc_func+0xf2>
	
	case '1' :
	data_matrix [0]=1 ;  
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	90 93 8b 00 	sts	0x008B, r25
	wrong_val=0;
 3f2:	10 92 85 00 	sts	0x0085, r1
	break; 
 3f6:	2f c0       	rjmp	.+94     	; 0x456 <calc_func+0xf2>
	
	case '2' :
	data_matrix [0]=2 ;
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	90 93 8b 00 	sts	0x008B, r25
	wrong_val=0;
 3fe:	10 92 85 00 	sts	0x0085, r1
	break; 
 402:	29 c0       	rjmp	.+82     	; 0x456 <calc_func+0xf2>
	
	case '3' :
	data_matrix [0]=3 ;
 404:	93 e0       	ldi	r25, 0x03	; 3
 406:	90 93 8b 00 	sts	0x008B, r25
	wrong_val=0;
 40a:	10 92 85 00 	sts	0x0085, r1
	break ;
 40e:	23 c0       	rjmp	.+70     	; 0x456 <calc_func+0xf2>
	
	case '4' :
	data_matrix [0]=4 ;
 410:	94 e0       	ldi	r25, 0x04	; 4
 412:	90 93 8b 00 	sts	0x008B, r25
	wrong_val=0;
 416:	10 92 85 00 	sts	0x0085, r1
	break ;
 41a:	1d c0       	rjmp	.+58     	; 0x456 <calc_func+0xf2>
	
	case '5' :
	data_matrix [0]=5 ;
 41c:	95 e0       	ldi	r25, 0x05	; 5
 41e:	90 93 8b 00 	sts	0x008B, r25
	wrong_val=0;
 422:	10 92 85 00 	sts	0x0085, r1
	break; 
 426:	17 c0       	rjmp	.+46     	; 0x456 <calc_func+0xf2>
	
	case '6' :
	data_matrix [0]=6 ;
 428:	96 e0       	ldi	r25, 0x06	; 6
 42a:	90 93 8b 00 	sts	0x008B, r25
	wrong_val=0;
 42e:	10 92 85 00 	sts	0x0085, r1
	break; 
 432:	11 c0       	rjmp	.+34     	; 0x456 <calc_func+0xf2>
	
	case '7' :
	wrong_val=0;
 434:	10 92 85 00 	sts	0x0085, r1
	data_matrix [0]=7 ;
 438:	97 e0       	ldi	r25, 0x07	; 7
 43a:	90 93 8b 00 	sts	0x008B, r25
	break; 
 43e:	0b c0       	rjmp	.+22     	; 0x456 <calc_func+0xf2>
	
	case '8' :
	wrong_val=0;
 440:	10 92 85 00 	sts	0x0085, r1
	data_matrix [0]=8 ;
 444:	98 e0       	ldi	r25, 0x08	; 8
 446:	90 93 8b 00 	sts	0x008B, r25
	break; 
 44a:	05 c0       	rjmp	.+10     	; 0x456 <calc_func+0xf2>
	
	case '9' :
	wrong_val=0;
 44c:	10 92 85 00 	sts	0x0085, r1
	data_matrix [0]=9 ;
 450:	99 e0       	ldi	r25, 0x09	; 9
 452:	90 93 8b 00 	sts	0x008B, r25
	break; 
	
	
	}
	output= data_matrix[0] ;
 456:	90 91 8b 00 	lds	r25, 0x008B
 45a:	90 93 82 00 	sts	0x0082, r25
	jump_flagnumber=1 ;
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	90 93 8e 00 	sts	0x008E, r25
	}	
		
		
	if(1==flag_number)
 464:	90 91 7e 00 	lds	r25, 0x007E
 468:	91 30       	cpi	r25, 0x01	; 1
 46a:	a1 f5       	brne	.+104    	; 0x4d4 <calc_func+0x170>
	{
		flag_error=1;
 46c:	90 93 83 00 	sts	0x0083, r25
		switch(data)
 470:	8b 32       	cpi	r24, 0x2B	; 43
 472:	09 f1       	breq	.+66     	; 0x4b6 <calc_func+0x152>
 474:	8c 32       	cpi	r24, 0x2C	; 44
 476:	18 f4       	brcc	.+6      	; 0x47e <calc_func+0x11a>
 478:	8a 32       	cpi	r24, 0x2A	; 42
 47a:	21 f5       	brne	.+72     	; 0x4c4 <calc_func+0x160>
 47c:	0c c0       	rjmp	.+24     	; 0x496 <calc_func+0x132>
 47e:	8d 32       	cpi	r24, 0x2D	; 45
 480:	91 f0       	breq	.+36     	; 0x4a6 <calc_func+0x142>
 482:	8f 32       	cpi	r24, 0x2F	; 47
 484:	f9 f4       	brne	.+62     	; 0x4c4 <calc_func+0x160>
		{
			
		case '/' :
		wrong_val=0;
 486:	10 92 85 00 	sts	0x0085, r1
		data_matrix [1]='/' ;
 48a:	9f e2       	ldi	r25, 0x2F	; 47
 48c:	90 93 8c 00 	sts	0x008C, r25
		flag_error=0;
 490:	10 92 83 00 	sts	0x0083, r1
		break; 
 494:	17 c0       	rjmp	.+46     	; 0x4c4 <calc_func+0x160>
		
		case '*' :
		wrong_val=0;
 496:	10 92 85 00 	sts	0x0085, r1
		data_matrix [1]='*' ;
 49a:	9a e2       	ldi	r25, 0x2A	; 42
 49c:	90 93 8c 00 	sts	0x008C, r25
		flag_error=0;
 4a0:	10 92 83 00 	sts	0x0083, r1
		break; 
 4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <calc_func+0x160>
		
		case '-' :
		wrong_val=0;
 4a6:	10 92 85 00 	sts	0x0085, r1
		data_matrix [1]='-' ;
 4aa:	9d e2       	ldi	r25, 0x2D	; 45
 4ac:	90 93 8c 00 	sts	0x008C, r25
		flag_error=0;
 4b0:	10 92 83 00 	sts	0x0083, r1
		break; 
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <calc_func+0x160>
		
		case '+' :
		wrong_val=0;
 4b6:	10 92 85 00 	sts	0x0085, r1
		data_matrix [1]='+' ;
 4ba:	9b e2       	ldi	r25, 0x2B	; 43
 4bc:	90 93 8c 00 	sts	0x008C, r25
		flag_error=0;
 4c0:	10 92 83 00 	sts	0x0083, r1
		break; 
		
		
		}
		
	output = data_matrix[1]-48;
 4c4:	90 91 8c 00 	lds	r25, 0x008C
 4c8:	90 53       	subi	r25, 0x30	; 48
 4ca:	90 93 82 00 	sts	0x0082, r25
	jump_flagsign=1 ;
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	90 93 84 00 	sts	0x0084, r25
		
		
	}
	if (1==flag_sign){
 4d4:	90 91 86 00 	lds	r25, 0x0086
 4d8:	91 30       	cpi	r25, 0x01	; 1
 4da:	09 f0       	breq	.+2      	; 0x4de <calc_func+0x17a>
 4dc:	66 c0       	rjmp	.+204    	; 0x5aa <calc_func+0x246>
		
		switch(data)
 4de:	84 33       	cpi	r24, 0x34	; 52
 4e0:	b1 f1       	breq	.+108    	; 0x54e <calc_func+0x1ea>
 4e2:	85 33       	cpi	r24, 0x35	; 53
 4e4:	70 f4       	brcc	.+28     	; 0x502 <calc_func+0x19e>
 4e6:	81 33       	cpi	r24, 0x31	; 49
 4e8:	01 f1       	breq	.+64     	; 0x52a <calc_func+0x1c6>
 4ea:	82 33       	cpi	r24, 0x32	; 50
 4ec:	20 f4       	brcc	.+8      	; 0x4f6 <calc_func+0x192>
 4ee:	80 33       	cpi	r24, 0x30	; 48
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <calc_func+0x190>
 4f2:	51 c0       	rjmp	.+162    	; 0x596 <calc_func+0x232>
 4f4:	15 c0       	rjmp	.+42     	; 0x520 <calc_func+0x1bc>
 4f6:	82 33       	cpi	r24, 0x32	; 50
 4f8:	f1 f0       	breq	.+60     	; 0x536 <calc_func+0x1d2>
 4fa:	83 33       	cpi	r24, 0x33	; 51
 4fc:	09 f0       	breq	.+2      	; 0x500 <calc_func+0x19c>
 4fe:	4b c0       	rjmp	.+150    	; 0x596 <calc_func+0x232>
 500:	20 c0       	rjmp	.+64     	; 0x542 <calc_func+0x1de>
 502:	87 33       	cpi	r24, 0x37	; 55
 504:	b1 f1       	breq	.+108    	; 0x572 <calc_func+0x20e>
 506:	88 33       	cpi	r24, 0x38	; 56
 508:	30 f4       	brcc	.+12     	; 0x516 <calc_func+0x1b2>
 50a:	85 33       	cpi	r24, 0x35	; 53
 50c:	31 f1       	breq	.+76     	; 0x55a <calc_func+0x1f6>
 50e:	86 33       	cpi	r24, 0x36	; 54
 510:	09 f0       	breq	.+2      	; 0x514 <calc_func+0x1b0>
 512:	41 c0       	rjmp	.+130    	; 0x596 <calc_func+0x232>
 514:	28 c0       	rjmp	.+80     	; 0x566 <calc_func+0x202>
 516:	88 33       	cpi	r24, 0x38	; 56
 518:	91 f1       	breq	.+100    	; 0x57e <calc_func+0x21a>
 51a:	89 33       	cpi	r24, 0x39	; 57
 51c:	e1 f5       	brne	.+120    	; 0x596 <calc_func+0x232>
 51e:	35 c0       	rjmp	.+106    	; 0x58a <calc_func+0x226>
		{
			
			case '0' :
			wrong_val=0;
 520:	10 92 85 00 	sts	0x0085, r1
			data_matrix[2]= 0 ;
 524:	10 92 8d 00 	sts	0x008D, r1
			break;
 528:	39 c0       	rjmp	.+114    	; 0x59c <calc_func+0x238>
			
			case '1' :
			wrong_val=0;
 52a:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=1 ;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	80 93 8d 00 	sts	0x008D, r24
			break;
 534:	33 c0       	rjmp	.+102    	; 0x59c <calc_func+0x238>
			
			case '2' :
			wrong_val=0;
 536:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=2 ;
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	80 93 8d 00 	sts	0x008D, r24
			break;
 540:	2d c0       	rjmp	.+90     	; 0x59c <calc_func+0x238>
			
			case '3' :
			wrong_val=0;
 542:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=3 ;
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	80 93 8d 00 	sts	0x008D, r24
			break ;
 54c:	27 c0       	rjmp	.+78     	; 0x59c <calc_func+0x238>
			
			case '4' :
			wrong_val=0;
 54e:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=4 ;
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	80 93 8d 00 	sts	0x008D, r24
			break ;
 558:	21 c0       	rjmp	.+66     	; 0x59c <calc_func+0x238>
			
			case '5' :
			wrong_val=0;
 55a:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=5 ;
 55e:	85 e0       	ldi	r24, 0x05	; 5
 560:	80 93 8d 00 	sts	0x008D, r24
			break;
 564:	1b c0       	rjmp	.+54     	; 0x59c <calc_func+0x238>
			
			case '6' :
			wrong_val=0;
 566:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=6 ;
 56a:	86 e0       	ldi	r24, 0x06	; 6
 56c:	80 93 8d 00 	sts	0x008D, r24
			break;
 570:	15 c0       	rjmp	.+42     	; 0x59c <calc_func+0x238>
			
			case '7' :
			wrong_val=0;
 572:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=7 ;
 576:	87 e0       	ldi	r24, 0x07	; 7
 578:	80 93 8d 00 	sts	0x008D, r24
			break;
 57c:	0f c0       	rjmp	.+30     	; 0x59c <calc_func+0x238>
			
			case '8' :
			wrong_val=0;
 57e:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=8 ;
 582:	88 e0       	ldi	r24, 0x08	; 8
 584:	80 93 8d 00 	sts	0x008D, r24
			break;
 588:	09 c0       	rjmp	.+18     	; 0x59c <calc_func+0x238>
			
			case '9' :
			wrong_val=0;
 58a:	10 92 85 00 	sts	0x0085, r1
			data_matrix [2]=9 ;
 58e:	89 e0       	ldi	r24, 0x09	; 9
 590:	80 93 8d 00 	sts	0x008D, r24
			break;
 594:	03 c0       	rjmp	.+6      	; 0x59c <calc_func+0x238>
			
			default:
			wrong_val=1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 85 00 	sts	0x0085, r24
			
		}
		
		output= data_matrix[2] ;
 59c:	80 91 8d 00 	lds	r24, 0x008D
 5a0:	80 93 82 00 	sts	0x0082, r24
		
		flage_2nd=1 ;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	80 93 81 00 	sts	0x0081, r24
	}
	
			if(jump_flagnumber==1)
 5aa:	80 91 8e 00 	lds	r24, 0x008E
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <calc_func+0x252>
			{
				flag_number=1 ; 
 5b2:	80 93 7e 00 	sts	0x007E, r24
			}	
			if(jump_flagsign==1)
 5b6:	80 91 84 00 	lds	r24, 0x0084
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <calc_func+0x25e>
			{
				flag_sign=1 ;
 5be:	80 93 86 00 	sts	0x0086, r24
			}

		return output+48 ;
 5c2:	80 91 82 00 	lds	r24, 0x0082
 5c6:	80 5d       	subi	r24, 0xD0	; 208

}
 5c8:	cf 91       	pop	r28
 5ca:	08 95       	ret

000005cc <clear_flags>:
	return out_calc;
	}
	
	void clear_flags(void){
		
			flage_2nd=0 ;
 5cc:	10 92 81 00 	sts	0x0081, r1
			flag_number=0 ;
 5d0:	10 92 7e 00 	sts	0x007E, r1
			flag_sign=0 ;
 5d4:	10 92 86 00 	sts	0x0086, r1
			jump_flagnumber=0;
 5d8:	10 92 8e 00 	sts	0x008E, r1
			jump_flagsign=0;
 5dc:	10 92 84 00 	sts	0x0084, r1
			flag_neg=0 ;		
 5e0:	10 92 8f 00 	sts	0x008F, r1
			flag_float=0;
 5e4:	10 92 88 00 	sts	0x0088, r1
			
			
 5e8:	08 95       	ret

000005ea <main>:
#include "LCD.h"

void checks(uint8_t);
int main(void)
{
	keypad_init();
 5ea:	0e 94 49 00 	call	0x92	; 0x92 <keypad_init>
	lcd_init();
 5ee:	0e 94 cd 03 	call	0x79a	; 0x79a <lcd_init>
	//lcd_write_txt("hello");
	DDRA =0xff;
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	8a bb       	out	0x1a, r24	; 26
				{
					
					lcd_write_cmd_char(0x01,0);
					
					
					lcd_write_txt("wrong input");
 5f6:	02 e7       	ldi	r16, 0x72	; 114
 5f8:	10 e0       	ldi	r17, 0x00	; 0
	//lcd_write_txt("hello");
	DDRA =0xff;
    while(1)
    { 
		uint8_t var;
		uint8_t data= keypad_read();
 5fa:	0e 94 4e 00 	call	0x9c	; 0x9c <keypad_read>
 5fe:	c8 2f       	mov	r28, r24
   
	   if (data)
 600:	88 23       	and	r24, r24
 602:	09 f4       	brne	.+2      	; 0x606 <main+0x1c>
 604:	57 c0       	rjmp	.+174    	; 0x6b4 <main+0xca>
       {
		  
		 
		  if(new_output)
 606:	80 91 87 00 	lds	r24, 0x0087
 60a:	88 23       	and	r24, r24
 60c:	31 f0       	breq	.+12     	; 0x61a <main+0x30>
			   { 
				   lcd_write_cmd_char(0x01,0);
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
				 new_output=0;
 616:	10 92 87 00 	sts	0x0087, r1
			   }		
			   
			   var =calc_func(data);
 61a:	8c 2f       	mov	r24, r28
 61c:	0e 94 b2 01 	call	0x364	; 0x364 <calc_func>
 620:	c8 2f       	mov	r28, r24
				
				if(wrong_val==1)
 622:	80 91 85 00 	lds	r24, 0x0085
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	c9 f4       	brne	.+50     	; 0x65c <main+0x72>
				{
					
					lcd_write_cmd_char(0x01,0);
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
					
					
					lcd_write_txt("wrong input");
 630:	c8 01       	movw	r24, r16
 632:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <lcd_write_txt>
 636:	8f e7       	ldi	r24, 0x7F	; 127
 638:	9f e4       	ldi	r25, 0x4F	; 79
 63a:	a2 e1       	ldi	r26, 0x12	; 18
 63c:	81 50       	subi	r24, 0x01	; 1
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	a0 40       	sbci	r26, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <main+0x52>
 644:	00 c0       	rjmp	.+0      	; 0x646 <main+0x5c>
 646:	00 00       	nop
					_delay_ms(500);
					lcd_write_cmd_char(0x01,0);
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
					wrong_val=0;
 650:	10 92 85 00 	sts	0x0085, r1
					clear_all=1 ;
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 93 80 00 	sts	0x0080, r24
 65a:	2c c0       	rjmp	.+88     	; 0x6b4 <main+0xca>
				}
				else{
			 
			   if(flag_float)
 65c:	80 91 88 00 	lds	r24, 0x0088
 660:	88 23       	and	r24, r24
 662:	51 f0       	breq	.+20     	; 0x678 <main+0x8e>
			   {
			    lcd_write_cmd_char('.',1); 
 664:	8e e2       	ldi	r24, 0x2E	; 46
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
			  lcd_write_number(var-48);
 66c:	8c 2f       	mov	r24, r28
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	c0 97       	sbiw	r24, 0x30	; 48
 672:	0e 94 04 04 	call	0x808	; 0x808 <lcd_write_number>
 676:	1e c0       	rjmp	.+60     	; 0x6b4 <main+0xca>
				
			   }	
				
			   else if((var-48)>9){
 678:	8c 2f       	mov	r24, r28
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	c0 97       	sbiw	r24, 0x30	; 48
 67e:	8a 30       	cpi	r24, 0x0A	; 10
 680:	91 05       	cpc	r25, r1
 682:	1c f0       	brlt	.+6      	; 0x68a <main+0xa0>
			   lcd_write_number(var-48);
 684:	0e 94 04 04 	call	0x808	; 0x808 <lcd_write_number>
 688:	15 c0       	rjmp	.+42     	; 0x6b4 <main+0xca>
			   }
			   else
			  if(flag_neg){
 68a:	80 91 8f 00 	lds	r24, 0x008F
 68e:	88 23       	and	r24, r24
 690:	49 f0       	breq	.+18     	; 0x6a4 <main+0xba>
			   lcd_write_cmd_char('-',1); 
 692:	8d e2       	ldi	r24, 0x2D	; 45
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
			   lcd_write_cmd_char(var,1); 
 69a:	8c 2f       	mov	r24, r28
 69c:	61 e0       	ldi	r22, 0x01	; 1
 69e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
 6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <main+0xca>
			   
			   }			   
			   else if(flag_neg==0 && (var-48)<=9  )
 6a4:	80 91 8f 00 	lds	r24, 0x008F
 6a8:	88 23       	and	r24, r24
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <main+0xca>
				{  lcd_write_cmd_char(var,1); 
 6ac:	8c 2f       	mov	r24, r28
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
				}		  
				}							
				}				
				flag_error=0 ;				
 6b4:	10 92 83 00 	sts	0x0083, r1
	   	
	
	if(clear_all)
 6b8:	80 91 80 00 	lds	r24, 0x0080
 6bc:	88 23       	and	r24, r24
 6be:	21 f0       	breq	.+8      	; 0x6c8 <main+0xde>
	{
		
		clear_flags();
 6c0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <clear_flags>
		clear_all=0 ;
 6c4:	10 92 80 00 	sts	0x0080, r1
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	92 e5       	ldi	r25, 0x52	; 82
 6cc:	a7 e0       	ldi	r26, 0x07	; 7
 6ce:	81 50       	subi	r24, 0x01	; 1
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	a0 40       	sbci	r26, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <main+0xe4>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <main+0xee>
 6d8:	00 00       	nop
 6da:	8f cf       	rjmp	.-226    	; 0x5fa <main+0x10>

000006dc <lcd_write_cmd_char>:
	lcd_write_cmd_char(0x80,0);
	_delay_ms(20) ; 
}
void lcd_write_cmd_char(uint8_t data,uint8_t select){

	RS(select);
 6dc:	61 30       	cpi	r22, 0x01	; 1
 6de:	11 f4       	brne	.+4      	; 0x6e4 <lcd_write_cmd_char+0x8>
 6e0:	c1 9a       	sbi	0x18, 1	; 24
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <lcd_write_cmd_char+0xa>
 6e4:	c1 98       	cbi	0x18, 1	; 24
	
	D7(READBIT(data,7));
 6e6:	88 23       	and	r24, r24
 6e8:	14 f4       	brge	.+4      	; 0x6ee <lcd_write_cmd_char+0x12>
 6ea:	df 9a       	sbi	0x1b, 7	; 27
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <lcd_write_cmd_char+0x14>
 6ee:	df 98       	cbi	0x1b, 7	; 27
	D6(READBIT(data,6));
 6f0:	98 2f       	mov	r25, r24
 6f2:	92 95       	swap	r25
 6f4:	96 95       	lsr	r25
 6f6:	96 95       	lsr	r25
 6f8:	93 70       	andi	r25, 0x03	; 3
 6fa:	90 ff       	sbrs	r25, 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <lcd_write_cmd_char+0x26>
 6fe:	de 9a       	sbi	0x1b, 6	; 27
 700:	01 c0       	rjmp	.+2      	; 0x704 <lcd_write_cmd_char+0x28>
 702:	de 98       	cbi	0x1b, 6	; 27
	D5(READBIT(data,5));
 704:	98 2f       	mov	r25, r24
 706:	92 95       	swap	r25
 708:	96 95       	lsr	r25
 70a:	97 70       	andi	r25, 0x07	; 7
 70c:	90 ff       	sbrs	r25, 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <lcd_write_cmd_char+0x38>
 710:	dd 9a       	sbi	0x1b, 5	; 27
 712:	01 c0       	rjmp	.+2      	; 0x716 <lcd_write_cmd_char+0x3a>
 714:	dd 98       	cbi	0x1b, 5	; 27
	D4(READBIT(data,4));	
 716:	98 2f       	mov	r25, r24
 718:	92 95       	swap	r25
 71a:	9f 70       	andi	r25, 0x0F	; 15
 71c:	90 ff       	sbrs	r25, 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <lcd_write_cmd_char+0x48>
 720:	dc 9a       	sbi	0x1b, 4	; 27
 722:	01 c0       	rjmp	.+2      	; 0x726 <lcd_write_cmd_char+0x4a>
 724:	dc 98       	cbi	0x1b, 4	; 27
	EN(1)
 726:	c3 9a       	sbi	0x18, 3	; 24
 728:	e7 eb       	ldi	r30, 0xB7	; 183
 72a:	fb e0       	ldi	r31, 0x0B	; 11
 72c:	31 97       	sbiw	r30, 0x01	; 1
 72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_write_cmd_char+0x50>
 730:	00 c0       	rjmp	.+0      	; 0x732 <lcd_write_cmd_char+0x56>
 732:	00 00       	nop
	_delay_ms(1);
	EN(0);
 734:	c3 98       	cbi	0x18, 3	; 24
 736:	e7 eb       	ldi	r30, 0xB7	; 183
 738:	fb e0       	ldi	r31, 0x0B	; 11
 73a:	31 97       	sbiw	r30, 0x01	; 1
 73c:	f1 f7       	brne	.-4      	; 0x73a <lcd_write_cmd_char+0x5e>
 73e:	00 c0       	rjmp	.+0      	; 0x740 <lcd_write_cmd_char+0x64>
 740:	00 00       	nop
	_delay_ms(1);
	D7(READBIT(data,3));
 742:	98 2f       	mov	r25, r24
 744:	96 95       	lsr	r25
 746:	96 95       	lsr	r25
 748:	96 95       	lsr	r25
 74a:	90 ff       	sbrs	r25, 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <lcd_write_cmd_char+0x76>
 74e:	df 9a       	sbi	0x1b, 7	; 27
 750:	01 c0       	rjmp	.+2      	; 0x754 <lcd_write_cmd_char+0x78>
 752:	df 98       	cbi	0x1b, 7	; 27
	D6(READBIT(data,2));
 754:	98 2f       	mov	r25, r24
 756:	96 95       	lsr	r25
 758:	96 95       	lsr	r25
 75a:	90 ff       	sbrs	r25, 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <lcd_write_cmd_char+0x86>
 75e:	de 9a       	sbi	0x1b, 6	; 27
 760:	01 c0       	rjmp	.+2      	; 0x764 <lcd_write_cmd_char+0x88>
 762:	de 98       	cbi	0x1b, 6	; 27
	D5(READBIT(data,1));
 764:	98 2f       	mov	r25, r24
 766:	96 95       	lsr	r25
 768:	90 ff       	sbrs	r25, 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <lcd_write_cmd_char+0x94>
 76c:	dd 9a       	sbi	0x1b, 5	; 27
 76e:	01 c0       	rjmp	.+2      	; 0x772 <lcd_write_cmd_char+0x96>
 770:	dd 98       	cbi	0x1b, 5	; 27
	D4(READBIT(data,0));
 772:	80 ff       	sbrs	r24, 0
 774:	02 c0       	rjmp	.+4      	; 0x77a <lcd_write_cmd_char+0x9e>
 776:	dc 9a       	sbi	0x1b, 4	; 27
 778:	01 c0       	rjmp	.+2      	; 0x77c <lcd_write_cmd_char+0xa0>
 77a:	dc 98       	cbi	0x1b, 4	; 27
	EN(1)
 77c:	c3 9a       	sbi	0x18, 3	; 24
 77e:	87 eb       	ldi	r24, 0xB7	; 183
 780:	9b e0       	ldi	r25, 0x0B	; 11
 782:	01 97       	sbiw	r24, 0x01	; 1
 784:	f1 f7       	brne	.-4      	; 0x782 <lcd_write_cmd_char+0xa6>
 786:	00 c0       	rjmp	.+0      	; 0x788 <lcd_write_cmd_char+0xac>
 788:	00 00       	nop
	_delay_ms(1);
	EN(0);
 78a:	c3 98       	cbi	0x18, 3	; 24
 78c:	e7 eb       	ldi	r30, 0xB7	; 183
 78e:	fb e0       	ldi	r31, 0x0B	; 11
 790:	31 97       	sbiw	r30, 0x01	; 1
 792:	f1 f7       	brne	.-4      	; 0x790 <lcd_write_cmd_char+0xb4>
 794:	00 c0       	rjmp	.+0      	; 0x796 <lcd_write_cmd_char+0xba>
 796:	00 00       	nop
	_delay_ms(1);
	
	
}
 798:	08 95       	ret

0000079a <lcd_init>:
 *  Author: sherif othman
 */ 
#include "LCD.h"

void lcd_init(){
	SETBIT(DDRA,DDA4);//D4
 79a:	d4 9a       	sbi	0x1a, 4	; 26
	SETBIT(DDRA,DDA5);//D5		#DEFINE INIT_PORT_LCD DDRA |= 15<<4; DDRB|=7<<1   
 79c:	d5 9a       	sbi	0x1a, 5	; 26
	SETBIT(DDRA,DDA6);//D6
 79e:	d6 9a       	sbi	0x1a, 6	; 26
	SETBIT(DDRA,DDA7);//D7
 7a0:	d7 9a       	sbi	0x1a, 7	; 26
	SETBIT(DDRB,DDB1);//TO SELECT COMMAND OR DATA
 7a2:	b9 9a       	sbi	0x17, 1	; 23
	SETBIT(DDRB,DDB2);//TO READ FROM LCD
 7a4:	ba 9a       	sbi	0x17, 2	; 23
	SETBIT(DDRB,DDB3);//TO ENABLE PUSHING DATA
 7a6:	bb 9a       	sbi	0x17, 3	; 23
	RW(0);
 7a8:	c2 98       	cbi	0x18, 2	; 24
	lcd_write_cmd_char(0x02,0);
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
	lcd_write_cmd_char(0x28,0);
 7b2:	88 e2       	ldi	r24, 0x28	; 40
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
	lcd_write_cmd_char(0x01,0);
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
	lcd_write_cmd_char(0x0c,0);
 7c2:	8c e0       	ldi	r24, 0x0C	; 12
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
	lcd_write_cmd_char(0x06,0);
 7ca:	86 e0       	ldi	r24, 0x06	; 6
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
	lcd_write_cmd_char(0x80,0);
 7d2:	80 e8       	ldi	r24, 0x80	; 128
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
 7da:	8f e5       	ldi	r24, 0x5F	; 95
 7dc:	9a ee       	ldi	r25, 0xEA	; 234
 7de:	01 97       	sbiw	r24, 0x01	; 1
 7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_init+0x44>
 7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <lcd_init+0x4a>
 7e4:	00 00       	nop
	_delay_ms(20) ; 
}
 7e6:	08 95       	ret

000007e8 <lcd_write_txt>:
	EN(0);
	_delay_ms(1);
	
	
}
void lcd_write_txt(char *txt){
 7e8:	cf 93       	push	r28
 7ea:	df 93       	push	r29
 7ec:	ec 01       	movw	r28, r24
	short i;
	for (i=0;txt[i]!='\0';i++)
 7ee:	88 81       	ld	r24, Y
 7f0:	88 23       	and	r24, r24
 7f2:	39 f0       	breq	.+14     	; 0x802 <lcd_write_txt+0x1a>
	EN(0);
	_delay_ms(1);
	
	
}
void lcd_write_txt(char *txt){
 7f4:	21 96       	adiw	r28, 0x01	; 1
	short i;
	for (i=0;txt[i]!='\0';i++)
	{lcd_write_cmd_char(txt[i],1);
 7f6:	61 e0       	ldi	r22, 0x01	; 1
 7f8:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
	
	
}
void lcd_write_txt(char *txt){
	short i;
	for (i=0;txt[i]!='\0';i++)
 7fc:	89 91       	ld	r24, Y+
 7fe:	88 23       	and	r24, r24
 800:	d1 f7       	brne	.-12     	; 0x7f6 <lcd_write_txt+0xe>
	{lcd_write_cmd_char(txt[i],1);
	}

}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	08 95       	ret

00000808 <lcd_write_number>:

void lcd_write_number(uint16_t num){
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	2a 97       	sbiw	r28, 0x0a	; 10
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	f8 94       	cli
 818:	de bf       	out	0x3e, r29	; 62
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	cd bf       	out	0x3d, r28	; 61
	int8_t i;
	uint8_t txt[10];
	for(i=0;(num!=0);i++){
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	49 f1       	breq	.+82     	; 0x874 <__stack+0x15>
 822:	10 e0       	ldi	r17, 0x00	; 0
		txt[i]=num%10;
 824:	2a e0       	ldi	r18, 0x0A	; 10
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	e1 2f       	mov	r30, r17
 82a:	ff 27       	eor	r31, r31
 82c:	e7 fd       	sbrc	r30, 7
 82e:	f0 95       	com	r31
 830:	41 e0       	ldi	r20, 0x01	; 1
 832:	50 e0       	ldi	r21, 0x00	; 0
 834:	4c 0f       	add	r20, r28
 836:	5d 1f       	adc	r21, r29
 838:	e4 0f       	add	r30, r20
 83a:	f5 1f       	adc	r31, r21
 83c:	b9 01       	movw	r22, r18
 83e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodhi4>
 842:	80 83       	st	Z, r24
		num/=10;
 844:	86 2f       	mov	r24, r22
 846:	97 2f       	mov	r25, r23
}

void lcd_write_number(uint16_t num){
	int8_t i;
	uint8_t txt[10];
	for(i=0;(num!=0);i++){
 848:	1f 5f       	subi	r17, 0xFF	; 255
 84a:	00 97       	sbiw	r24, 0x00	; 0
 84c:	69 f7       	brne	.-38     	; 0x828 <lcd_write_number+0x20>
		txt[i]=num%10;
		num/=10;
		//lcd_write_cmd_char(num+48,1);
	}
	i--;
 84e:	11 50       	subi	r17, 0x01	; 1
	for (;i>=0;i--)
 850:	8a f0       	brmi	.+34     	; 0x874 <__stack+0x15>
	{lcd_write_cmd_char(txt[i]+48,1);
 852:	e1 2f       	mov	r30, r17
 854:	ff 27       	eor	r31, r31
 856:	e7 fd       	sbrc	r30, 7
 858:	f0 95       	com	r31
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	8c 0f       	add	r24, r28
 860:	9d 1f       	adc	r25, r29
 862:	e8 0f       	add	r30, r24
 864:	f9 1f       	adc	r31, r25
 866:	80 81       	ld	r24, Z
 868:	80 5d       	subi	r24, 0xD0	; 208
 86a:	61 e0       	ldi	r22, 0x01	; 1
 86c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <lcd_write_cmd_char>
		txt[i]=num%10;
		num/=10;
		//lcd_write_cmd_char(num+48,1);
	}
	i--;
	for (;i>=0;i--)
 870:	11 50       	subi	r17, 0x01	; 1
 872:	78 f7       	brcc	.-34     	; 0x852 <lcd_write_number+0x4a>
	{lcd_write_cmd_char(txt[i]+48,1);
	}
 874:	2a 96       	adiw	r28, 0x0a	; 10
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	08 95       	ret

00000888 <__subsf3>:
 888:	50 58       	subi	r21, 0x80	; 128

0000088a <__addsf3>:
 88a:	bb 27       	eor	r27, r27
 88c:	aa 27       	eor	r26, r26
 88e:	0e d0       	rcall	.+28     	; 0x8ac <__addsf3x>
 890:	48 c1       	rjmp	.+656    	; 0xb22 <__fp_round>
 892:	39 d1       	rcall	.+626    	; 0xb06 <__fp_pscA>
 894:	30 f0       	brcs	.+12     	; 0x8a2 <__addsf3+0x18>
 896:	3e d1       	rcall	.+636    	; 0xb14 <__fp_pscB>
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__addsf3+0x18>
 89a:	31 f4       	brne	.+12     	; 0x8a8 <__addsf3+0x1e>
 89c:	9f 3f       	cpi	r25, 0xFF	; 255
 89e:	11 f4       	brne	.+4      	; 0x8a4 <__addsf3+0x1a>
 8a0:	1e f4       	brtc	.+6      	; 0x8a8 <__addsf3+0x1e>
 8a2:	2e c1       	rjmp	.+604    	; 0xb00 <__fp_nan>
 8a4:	0e f4       	brtc	.+2      	; 0x8a8 <__addsf3+0x1e>
 8a6:	e0 95       	com	r30
 8a8:	e7 fb       	bst	r30, 7
 8aa:	24 c1       	rjmp	.+584    	; 0xaf4 <__fp_inf>

000008ac <__addsf3x>:
 8ac:	e9 2f       	mov	r30, r25
 8ae:	4a d1       	rcall	.+660    	; 0xb44 <__fp_split3>
 8b0:	80 f3       	brcs	.-32     	; 0x892 <__addsf3+0x8>
 8b2:	ba 17       	cp	r27, r26
 8b4:	62 07       	cpc	r22, r18
 8b6:	73 07       	cpc	r23, r19
 8b8:	84 07       	cpc	r24, r20
 8ba:	95 07       	cpc	r25, r21
 8bc:	18 f0       	brcs	.+6      	; 0x8c4 <__addsf3x+0x18>
 8be:	71 f4       	brne	.+28     	; 0x8dc <__addsf3x+0x30>
 8c0:	9e f5       	brtc	.+102    	; 0x928 <__addsf3x+0x7c>
 8c2:	62 c1       	rjmp	.+708    	; 0xb88 <__fp_zero>
 8c4:	0e f4       	brtc	.+2      	; 0x8c8 <__addsf3x+0x1c>
 8c6:	e0 95       	com	r30
 8c8:	0b 2e       	mov	r0, r27
 8ca:	ba 2f       	mov	r27, r26
 8cc:	a0 2d       	mov	r26, r0
 8ce:	0b 01       	movw	r0, r22
 8d0:	b9 01       	movw	r22, r18
 8d2:	90 01       	movw	r18, r0
 8d4:	0c 01       	movw	r0, r24
 8d6:	ca 01       	movw	r24, r20
 8d8:	a0 01       	movw	r20, r0
 8da:	11 24       	eor	r1, r1
 8dc:	ff 27       	eor	r31, r31
 8de:	59 1b       	sub	r21, r25
 8e0:	99 f0       	breq	.+38     	; 0x908 <__addsf3x+0x5c>
 8e2:	59 3f       	cpi	r21, 0xF9	; 249
 8e4:	50 f4       	brcc	.+20     	; 0x8fa <__addsf3x+0x4e>
 8e6:	50 3e       	cpi	r21, 0xE0	; 224
 8e8:	68 f1       	brcs	.+90     	; 0x944 <__addsf3x+0x98>
 8ea:	1a 16       	cp	r1, r26
 8ec:	f0 40       	sbci	r31, 0x00	; 0
 8ee:	a2 2f       	mov	r26, r18
 8f0:	23 2f       	mov	r18, r19
 8f2:	34 2f       	mov	r19, r20
 8f4:	44 27       	eor	r20, r20
 8f6:	58 5f       	subi	r21, 0xF8	; 248
 8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <__addsf3x+0x34>
 8fa:	46 95       	lsr	r20
 8fc:	37 95       	ror	r19
 8fe:	27 95       	ror	r18
 900:	a7 95       	ror	r26
 902:	f0 40       	sbci	r31, 0x00	; 0
 904:	53 95       	inc	r21
 906:	c9 f7       	brne	.-14     	; 0x8fa <__addsf3x+0x4e>
 908:	7e f4       	brtc	.+30     	; 0x928 <__addsf3x+0x7c>
 90a:	1f 16       	cp	r1, r31
 90c:	ba 0b       	sbc	r27, r26
 90e:	62 0b       	sbc	r22, r18
 910:	73 0b       	sbc	r23, r19
 912:	84 0b       	sbc	r24, r20
 914:	ba f0       	brmi	.+46     	; 0x944 <__addsf3x+0x98>
 916:	91 50       	subi	r25, 0x01	; 1
 918:	a1 f0       	breq	.+40     	; 0x942 <__addsf3x+0x96>
 91a:	ff 0f       	add	r31, r31
 91c:	bb 1f       	adc	r27, r27
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	c2 f7       	brpl	.-16     	; 0x916 <__addsf3x+0x6a>
 926:	0e c0       	rjmp	.+28     	; 0x944 <__addsf3x+0x98>
 928:	ba 0f       	add	r27, r26
 92a:	62 1f       	adc	r22, r18
 92c:	73 1f       	adc	r23, r19
 92e:	84 1f       	adc	r24, r20
 930:	48 f4       	brcc	.+18     	; 0x944 <__addsf3x+0x98>
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	08 f0       	brcs	.+2      	; 0x942 <__addsf3x+0x96>
 940:	b3 cf       	rjmp	.-154    	; 0x8a8 <__addsf3+0x1e>
 942:	93 95       	inc	r25
 944:	88 0f       	add	r24, r24
 946:	08 f0       	brcs	.+2      	; 0x94a <__addsf3x+0x9e>
 948:	99 27       	eor	r25, r25
 94a:	ee 0f       	add	r30, r30
 94c:	97 95       	ror	r25
 94e:	87 95       	ror	r24
 950:	08 95       	ret

00000952 <__divsf3>:
 952:	0c d0       	rcall	.+24     	; 0x96c <__divsf3x>
 954:	e6 c0       	rjmp	.+460    	; 0xb22 <__fp_round>
 956:	de d0       	rcall	.+444    	; 0xb14 <__fp_pscB>
 958:	40 f0       	brcs	.+16     	; 0x96a <__divsf3+0x18>
 95a:	d5 d0       	rcall	.+426    	; 0xb06 <__fp_pscA>
 95c:	30 f0       	brcs	.+12     	; 0x96a <__divsf3+0x18>
 95e:	21 f4       	brne	.+8      	; 0x968 <__divsf3+0x16>
 960:	5f 3f       	cpi	r21, 0xFF	; 255
 962:	19 f0       	breq	.+6      	; 0x96a <__divsf3+0x18>
 964:	c7 c0       	rjmp	.+398    	; 0xaf4 <__fp_inf>
 966:	51 11       	cpse	r21, r1
 968:	10 c1       	rjmp	.+544    	; 0xb8a <__fp_szero>
 96a:	ca c0       	rjmp	.+404    	; 0xb00 <__fp_nan>

0000096c <__divsf3x>:
 96c:	eb d0       	rcall	.+470    	; 0xb44 <__fp_split3>
 96e:	98 f3       	brcs	.-26     	; 0x956 <__divsf3+0x4>

00000970 <__divsf3_pse>:
 970:	99 23       	and	r25, r25
 972:	c9 f3       	breq	.-14     	; 0x966 <__divsf3+0x14>
 974:	55 23       	and	r21, r21
 976:	b1 f3       	breq	.-20     	; 0x964 <__divsf3+0x12>
 978:	95 1b       	sub	r25, r21
 97a:	55 0b       	sbc	r21, r21
 97c:	bb 27       	eor	r27, r27
 97e:	aa 27       	eor	r26, r26
 980:	62 17       	cp	r22, r18
 982:	73 07       	cpc	r23, r19
 984:	84 07       	cpc	r24, r20
 986:	38 f0       	brcs	.+14     	; 0x996 <__divsf3_pse+0x26>
 988:	9f 5f       	subi	r25, 0xFF	; 255
 98a:	5f 4f       	sbci	r21, 0xFF	; 255
 98c:	22 0f       	add	r18, r18
 98e:	33 1f       	adc	r19, r19
 990:	44 1f       	adc	r20, r20
 992:	aa 1f       	adc	r26, r26
 994:	a9 f3       	breq	.-22     	; 0x980 <__divsf3_pse+0x10>
 996:	33 d0       	rcall	.+102    	; 0x9fe <__divsf3_pse+0x8e>
 998:	0e 2e       	mov	r0, r30
 99a:	3a f0       	brmi	.+14     	; 0x9aa <__divsf3_pse+0x3a>
 99c:	e0 e8       	ldi	r30, 0x80	; 128
 99e:	30 d0       	rcall	.+96     	; 0xa00 <__divsf3_pse+0x90>
 9a0:	91 50       	subi	r25, 0x01	; 1
 9a2:	50 40       	sbci	r21, 0x00	; 0
 9a4:	e6 95       	lsr	r30
 9a6:	00 1c       	adc	r0, r0
 9a8:	ca f7       	brpl	.-14     	; 0x99c <__divsf3_pse+0x2c>
 9aa:	29 d0       	rcall	.+82     	; 0x9fe <__divsf3_pse+0x8e>
 9ac:	fe 2f       	mov	r31, r30
 9ae:	27 d0       	rcall	.+78     	; 0x9fe <__divsf3_pse+0x8e>
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	bb 1f       	adc	r27, r27
 9b8:	26 17       	cp	r18, r22
 9ba:	37 07       	cpc	r19, r23
 9bc:	48 07       	cpc	r20, r24
 9be:	ab 07       	cpc	r26, r27
 9c0:	b0 e8       	ldi	r27, 0x80	; 128
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <__divsf3_pse+0x56>
 9c4:	bb 0b       	sbc	r27, r27
 9c6:	80 2d       	mov	r24, r0
 9c8:	bf 01       	movw	r22, r30
 9ca:	ff 27       	eor	r31, r31
 9cc:	93 58       	subi	r25, 0x83	; 131
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	2a f0       	brmi	.+10     	; 0x9dc <__divsf3_pse+0x6c>
 9d2:	9e 3f       	cpi	r25, 0xFE	; 254
 9d4:	51 05       	cpc	r21, r1
 9d6:	68 f0       	brcs	.+26     	; 0x9f2 <__divsf3_pse+0x82>
 9d8:	8d c0       	rjmp	.+282    	; 0xaf4 <__fp_inf>
 9da:	d7 c0       	rjmp	.+430    	; 0xb8a <__fp_szero>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	ec f3       	brlt	.-6      	; 0x9da <__divsf3_pse+0x6a>
 9e0:	98 3e       	cpi	r25, 0xE8	; 232
 9e2:	dc f3       	brlt	.-10     	; 0x9da <__divsf3_pse+0x6a>
 9e4:	86 95       	lsr	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	9f 5f       	subi	r25, 0xFF	; 255
 9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__divsf3_pse+0x74>
 9f2:	88 0f       	add	r24, r24
 9f4:	91 1d       	adc	r25, r1
 9f6:	96 95       	lsr	r25
 9f8:	87 95       	ror	r24
 9fa:	97 f9       	bld	r25, 7
 9fc:	08 95       	ret
 9fe:	e1 e0       	ldi	r30, 0x01	; 1
 a00:	66 0f       	add	r22, r22
 a02:	77 1f       	adc	r23, r23
 a04:	88 1f       	adc	r24, r24
 a06:	bb 1f       	adc	r27, r27
 a08:	62 17       	cp	r22, r18
 a0a:	73 07       	cpc	r23, r19
 a0c:	84 07       	cpc	r24, r20
 a0e:	ba 07       	cpc	r27, r26
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__divsf3_pse+0xaa>
 a12:	62 1b       	sub	r22, r18
 a14:	73 0b       	sbc	r23, r19
 a16:	84 0b       	sbc	r24, r20
 a18:	ba 0b       	sbc	r27, r26
 a1a:	ee 1f       	adc	r30, r30
 a1c:	88 f7       	brcc	.-30     	; 0xa00 <__divsf3_pse+0x90>
 a1e:	e0 95       	com	r30
 a20:	08 95       	ret

00000a22 <__fixunssfsi>:
 a22:	98 d0       	rcall	.+304    	; 0xb54 <__fp_splitA>
 a24:	88 f0       	brcs	.+34     	; 0xa48 <__fixunssfsi+0x26>
 a26:	9f 57       	subi	r25, 0x7F	; 127
 a28:	90 f0       	brcs	.+36     	; 0xa4e <__fixunssfsi+0x2c>
 a2a:	b9 2f       	mov	r27, r25
 a2c:	99 27       	eor	r25, r25
 a2e:	b7 51       	subi	r27, 0x17	; 23
 a30:	a0 f0       	brcs	.+40     	; 0xa5a <__fixunssfsi+0x38>
 a32:	d1 f0       	breq	.+52     	; 0xa68 <__fixunssfsi+0x46>
 a34:	66 0f       	add	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	1a f0       	brmi	.+6      	; 0xa44 <__fixunssfsi+0x22>
 a3e:	ba 95       	dec	r27
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__fixunssfsi+0x12>
 a42:	12 c0       	rjmp	.+36     	; 0xa68 <__fixunssfsi+0x46>
 a44:	b1 30       	cpi	r27, 0x01	; 1
 a46:	81 f0       	breq	.+32     	; 0xa68 <__fixunssfsi+0x46>
 a48:	9f d0       	rcall	.+318    	; 0xb88 <__fp_zero>
 a4a:	b1 e0       	ldi	r27, 0x01	; 1
 a4c:	08 95       	ret
 a4e:	9c c0       	rjmp	.+312    	; 0xb88 <__fp_zero>
 a50:	67 2f       	mov	r22, r23
 a52:	78 2f       	mov	r23, r24
 a54:	88 27       	eor	r24, r24
 a56:	b8 5f       	subi	r27, 0xF8	; 248
 a58:	39 f0       	breq	.+14     	; 0xa68 <__fixunssfsi+0x46>
 a5a:	b9 3f       	cpi	r27, 0xF9	; 249
 a5c:	cc f3       	brlt	.-14     	; 0xa50 <__fixunssfsi+0x2e>
 a5e:	86 95       	lsr	r24
 a60:	77 95       	ror	r23
 a62:	67 95       	ror	r22
 a64:	b3 95       	inc	r27
 a66:	d9 f7       	brne	.-10     	; 0xa5e <__fixunssfsi+0x3c>
 a68:	3e f4       	brtc	.+14     	; 0xa78 <__fixunssfsi+0x56>
 a6a:	90 95       	com	r25
 a6c:	80 95       	com	r24
 a6e:	70 95       	com	r23
 a70:	61 95       	neg	r22
 a72:	7f 4f       	sbci	r23, 0xFF	; 255
 a74:	8f 4f       	sbci	r24, 0xFF	; 255
 a76:	9f 4f       	sbci	r25, 0xFF	; 255
 a78:	08 95       	ret

00000a7a <__floatunsisf>:
 a7a:	e8 94       	clt
 a7c:	09 c0       	rjmp	.+18     	; 0xa90 <__floatsisf+0x12>

00000a7e <__floatsisf>:
 a7e:	97 fb       	bst	r25, 7
 a80:	3e f4       	brtc	.+14     	; 0xa90 <__floatsisf+0x12>
 a82:	90 95       	com	r25
 a84:	80 95       	com	r24
 a86:	70 95       	com	r23
 a88:	61 95       	neg	r22
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	99 23       	and	r25, r25
 a92:	a9 f0       	breq	.+42     	; 0xabe <__floatsisf+0x40>
 a94:	f9 2f       	mov	r31, r25
 a96:	96 e9       	ldi	r25, 0x96	; 150
 a98:	bb 27       	eor	r27, r27
 a9a:	93 95       	inc	r25
 a9c:	f6 95       	lsr	r31
 a9e:	87 95       	ror	r24
 aa0:	77 95       	ror	r23
 aa2:	67 95       	ror	r22
 aa4:	b7 95       	ror	r27
 aa6:	f1 11       	cpse	r31, r1
 aa8:	f8 cf       	rjmp	.-16     	; 0xa9a <__floatsisf+0x1c>
 aaa:	fa f4       	brpl	.+62     	; 0xaea <__floatsisf+0x6c>
 aac:	bb 0f       	add	r27, r27
 aae:	11 f4       	brne	.+4      	; 0xab4 <__floatsisf+0x36>
 ab0:	60 ff       	sbrs	r22, 0
 ab2:	1b c0       	rjmp	.+54     	; 0xaea <__floatsisf+0x6c>
 ab4:	6f 5f       	subi	r22, 0xFF	; 255
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	16 c0       	rjmp	.+44     	; 0xaea <__floatsisf+0x6c>
 abe:	88 23       	and	r24, r24
 ac0:	11 f0       	breq	.+4      	; 0xac6 <__floatsisf+0x48>
 ac2:	96 e9       	ldi	r25, 0x96	; 150
 ac4:	11 c0       	rjmp	.+34     	; 0xae8 <__floatsisf+0x6a>
 ac6:	77 23       	and	r23, r23
 ac8:	21 f0       	breq	.+8      	; 0xad2 <__floatsisf+0x54>
 aca:	9e e8       	ldi	r25, 0x8E	; 142
 acc:	87 2f       	mov	r24, r23
 ace:	76 2f       	mov	r23, r22
 ad0:	05 c0       	rjmp	.+10     	; 0xadc <__floatsisf+0x5e>
 ad2:	66 23       	and	r22, r22
 ad4:	71 f0       	breq	.+28     	; 0xaf2 <__floatsisf+0x74>
 ad6:	96 e8       	ldi	r25, 0x86	; 134
 ad8:	86 2f       	mov	r24, r22
 ada:	70 e0       	ldi	r23, 0x00	; 0
 adc:	60 e0       	ldi	r22, 0x00	; 0
 ade:	2a f0       	brmi	.+10     	; 0xaea <__floatsisf+0x6c>
 ae0:	9a 95       	dec	r25
 ae2:	66 0f       	add	r22, r22
 ae4:	77 1f       	adc	r23, r23
 ae6:	88 1f       	adc	r24, r24
 ae8:	da f7       	brpl	.-10     	; 0xae0 <__floatsisf+0x62>
 aea:	88 0f       	add	r24, r24
 aec:	96 95       	lsr	r25
 aee:	87 95       	ror	r24
 af0:	97 f9       	bld	r25, 7
 af2:	08 95       	ret

00000af4 <__fp_inf>:
 af4:	97 f9       	bld	r25, 7
 af6:	9f 67       	ori	r25, 0x7F	; 127
 af8:	80 e8       	ldi	r24, 0x80	; 128
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	60 e0       	ldi	r22, 0x00	; 0
 afe:	08 95       	ret

00000b00 <__fp_nan>:
 b00:	9f ef       	ldi	r25, 0xFF	; 255
 b02:	80 ec       	ldi	r24, 0xC0	; 192
 b04:	08 95       	ret

00000b06 <__fp_pscA>:
 b06:	00 24       	eor	r0, r0
 b08:	0a 94       	dec	r0
 b0a:	16 16       	cp	r1, r22
 b0c:	17 06       	cpc	r1, r23
 b0e:	18 06       	cpc	r1, r24
 b10:	09 06       	cpc	r0, r25
 b12:	08 95       	ret

00000b14 <__fp_pscB>:
 b14:	00 24       	eor	r0, r0
 b16:	0a 94       	dec	r0
 b18:	12 16       	cp	r1, r18
 b1a:	13 06       	cpc	r1, r19
 b1c:	14 06       	cpc	r1, r20
 b1e:	05 06       	cpc	r0, r21
 b20:	08 95       	ret

00000b22 <__fp_round>:
 b22:	09 2e       	mov	r0, r25
 b24:	03 94       	inc	r0
 b26:	00 0c       	add	r0, r0
 b28:	11 f4       	brne	.+4      	; 0xb2e <__fp_round+0xc>
 b2a:	88 23       	and	r24, r24
 b2c:	52 f0       	brmi	.+20     	; 0xb42 <__fp_round+0x20>
 b2e:	bb 0f       	add	r27, r27
 b30:	40 f4       	brcc	.+16     	; 0xb42 <__fp_round+0x20>
 b32:	bf 2b       	or	r27, r31
 b34:	11 f4       	brne	.+4      	; 0xb3a <__fp_round+0x18>
 b36:	60 ff       	sbrs	r22, 0
 b38:	04 c0       	rjmp	.+8      	; 0xb42 <__fp_round+0x20>
 b3a:	6f 5f       	subi	r22, 0xFF	; 255
 b3c:	7f 4f       	sbci	r23, 0xFF	; 255
 b3e:	8f 4f       	sbci	r24, 0xFF	; 255
 b40:	9f 4f       	sbci	r25, 0xFF	; 255
 b42:	08 95       	ret

00000b44 <__fp_split3>:
 b44:	57 fd       	sbrc	r21, 7
 b46:	90 58       	subi	r25, 0x80	; 128
 b48:	44 0f       	add	r20, r20
 b4a:	55 1f       	adc	r21, r21
 b4c:	59 f0       	breq	.+22     	; 0xb64 <__fp_splitA+0x10>
 b4e:	5f 3f       	cpi	r21, 0xFF	; 255
 b50:	71 f0       	breq	.+28     	; 0xb6e <__fp_splitA+0x1a>
 b52:	47 95       	ror	r20

00000b54 <__fp_splitA>:
 b54:	88 0f       	add	r24, r24
 b56:	97 fb       	bst	r25, 7
 b58:	99 1f       	adc	r25, r25
 b5a:	61 f0       	breq	.+24     	; 0xb74 <__fp_splitA+0x20>
 b5c:	9f 3f       	cpi	r25, 0xFF	; 255
 b5e:	79 f0       	breq	.+30     	; 0xb7e <__fp_splitA+0x2a>
 b60:	87 95       	ror	r24
 b62:	08 95       	ret
 b64:	12 16       	cp	r1, r18
 b66:	13 06       	cpc	r1, r19
 b68:	14 06       	cpc	r1, r20
 b6a:	55 1f       	adc	r21, r21
 b6c:	f2 cf       	rjmp	.-28     	; 0xb52 <__fp_split3+0xe>
 b6e:	46 95       	lsr	r20
 b70:	f1 df       	rcall	.-30     	; 0xb54 <__fp_splitA>
 b72:	08 c0       	rjmp	.+16     	; 0xb84 <__fp_splitA+0x30>
 b74:	16 16       	cp	r1, r22
 b76:	17 06       	cpc	r1, r23
 b78:	18 06       	cpc	r1, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	f1 cf       	rjmp	.-30     	; 0xb60 <__fp_splitA+0xc>
 b7e:	86 95       	lsr	r24
 b80:	71 05       	cpc	r23, r1
 b82:	61 05       	cpc	r22, r1
 b84:	08 94       	sec
 b86:	08 95       	ret

00000b88 <__fp_zero>:
 b88:	e8 94       	clt

00000b8a <__fp_szero>:
 b8a:	bb 27       	eor	r27, r27
 b8c:	66 27       	eor	r22, r22
 b8e:	77 27       	eor	r23, r23
 b90:	cb 01       	movw	r24, r22
 b92:	97 f9       	bld	r25, 7
 b94:	08 95       	ret

00000b96 <__gesf2>:
 b96:	66 d0       	rcall	.+204    	; 0xc64 <__fp_cmp>
 b98:	08 f4       	brcc	.+2      	; 0xb9c <__gesf2+0x6>
 b9a:	8f ef       	ldi	r24, 0xFF	; 255
 b9c:	08 95       	ret

00000b9e <__mulsf3>:
 b9e:	0b d0       	rcall	.+22     	; 0xbb6 <__mulsf3x>
 ba0:	c0 cf       	rjmp	.-128    	; 0xb22 <__fp_round>
 ba2:	b1 df       	rcall	.-158    	; 0xb06 <__fp_pscA>
 ba4:	28 f0       	brcs	.+10     	; 0xbb0 <__mulsf3+0x12>
 ba6:	b6 df       	rcall	.-148    	; 0xb14 <__fp_pscB>
 ba8:	18 f0       	brcs	.+6      	; 0xbb0 <__mulsf3+0x12>
 baa:	95 23       	and	r25, r21
 bac:	09 f0       	breq	.+2      	; 0xbb0 <__mulsf3+0x12>
 bae:	a2 cf       	rjmp	.-188    	; 0xaf4 <__fp_inf>
 bb0:	a7 cf       	rjmp	.-178    	; 0xb00 <__fp_nan>
 bb2:	11 24       	eor	r1, r1
 bb4:	ea cf       	rjmp	.-44     	; 0xb8a <__fp_szero>

00000bb6 <__mulsf3x>:
 bb6:	c6 df       	rcall	.-116    	; 0xb44 <__fp_split3>
 bb8:	a0 f3       	brcs	.-24     	; 0xba2 <__mulsf3+0x4>

00000bba <__mulsf3_pse>:
 bba:	95 9f       	mul	r25, r21
 bbc:	d1 f3       	breq	.-12     	; 0xbb2 <__mulsf3+0x14>
 bbe:	95 0f       	add	r25, r21
 bc0:	50 e0       	ldi	r21, 0x00	; 0
 bc2:	55 1f       	adc	r21, r21
 bc4:	62 9f       	mul	r22, r18
 bc6:	f0 01       	movw	r30, r0
 bc8:	72 9f       	mul	r23, r18
 bca:	bb 27       	eor	r27, r27
 bcc:	f0 0d       	add	r31, r0
 bce:	b1 1d       	adc	r27, r1
 bd0:	63 9f       	mul	r22, r19
 bd2:	aa 27       	eor	r26, r26
 bd4:	f0 0d       	add	r31, r0
 bd6:	b1 1d       	adc	r27, r1
 bd8:	aa 1f       	adc	r26, r26
 bda:	64 9f       	mul	r22, r20
 bdc:	66 27       	eor	r22, r22
 bde:	b0 0d       	add	r27, r0
 be0:	a1 1d       	adc	r26, r1
 be2:	66 1f       	adc	r22, r22
 be4:	82 9f       	mul	r24, r18
 be6:	22 27       	eor	r18, r18
 be8:	b0 0d       	add	r27, r0
 bea:	a1 1d       	adc	r26, r1
 bec:	62 1f       	adc	r22, r18
 bee:	73 9f       	mul	r23, r19
 bf0:	b0 0d       	add	r27, r0
 bf2:	a1 1d       	adc	r26, r1
 bf4:	62 1f       	adc	r22, r18
 bf6:	83 9f       	mul	r24, r19
 bf8:	a0 0d       	add	r26, r0
 bfa:	61 1d       	adc	r22, r1
 bfc:	22 1f       	adc	r18, r18
 bfe:	74 9f       	mul	r23, r20
 c00:	33 27       	eor	r19, r19
 c02:	a0 0d       	add	r26, r0
 c04:	61 1d       	adc	r22, r1
 c06:	23 1f       	adc	r18, r19
 c08:	84 9f       	mul	r24, r20
 c0a:	60 0d       	add	r22, r0
 c0c:	21 1d       	adc	r18, r1
 c0e:	82 2f       	mov	r24, r18
 c10:	76 2f       	mov	r23, r22
 c12:	6a 2f       	mov	r22, r26
 c14:	11 24       	eor	r1, r1
 c16:	9f 57       	subi	r25, 0x7F	; 127
 c18:	50 40       	sbci	r21, 0x00	; 0
 c1a:	8a f0       	brmi	.+34     	; 0xc3e <__mulsf3_pse+0x84>
 c1c:	e1 f0       	breq	.+56     	; 0xc56 <__mulsf3_pse+0x9c>
 c1e:	88 23       	and	r24, r24
 c20:	4a f0       	brmi	.+18     	; 0xc34 <__mulsf3_pse+0x7a>
 c22:	ee 0f       	add	r30, r30
 c24:	ff 1f       	adc	r31, r31
 c26:	bb 1f       	adc	r27, r27
 c28:	66 1f       	adc	r22, r22
 c2a:	77 1f       	adc	r23, r23
 c2c:	88 1f       	adc	r24, r24
 c2e:	91 50       	subi	r25, 0x01	; 1
 c30:	50 40       	sbci	r21, 0x00	; 0
 c32:	a9 f7       	brne	.-22     	; 0xc1e <__mulsf3_pse+0x64>
 c34:	9e 3f       	cpi	r25, 0xFE	; 254
 c36:	51 05       	cpc	r21, r1
 c38:	70 f0       	brcs	.+28     	; 0xc56 <__mulsf3_pse+0x9c>
 c3a:	5c cf       	rjmp	.-328    	; 0xaf4 <__fp_inf>
 c3c:	a6 cf       	rjmp	.-180    	; 0xb8a <__fp_szero>
 c3e:	5f 3f       	cpi	r21, 0xFF	; 255
 c40:	ec f3       	brlt	.-6      	; 0xc3c <__mulsf3_pse+0x82>
 c42:	98 3e       	cpi	r25, 0xE8	; 232
 c44:	dc f3       	brlt	.-10     	; 0xc3c <__mulsf3_pse+0x82>
 c46:	86 95       	lsr	r24
 c48:	77 95       	ror	r23
 c4a:	67 95       	ror	r22
 c4c:	b7 95       	ror	r27
 c4e:	f7 95       	ror	r31
 c50:	e7 95       	ror	r30
 c52:	9f 5f       	subi	r25, 0xFF	; 255
 c54:	c1 f7       	brne	.-16     	; 0xc46 <__mulsf3_pse+0x8c>
 c56:	fe 2b       	or	r31, r30
 c58:	88 0f       	add	r24, r24
 c5a:	91 1d       	adc	r25, r1
 c5c:	96 95       	lsr	r25
 c5e:	87 95       	ror	r24
 c60:	97 f9       	bld	r25, 7
 c62:	08 95       	ret

00000c64 <__fp_cmp>:
 c64:	99 0f       	add	r25, r25
 c66:	00 08       	sbc	r0, r0
 c68:	55 0f       	add	r21, r21
 c6a:	aa 0b       	sbc	r26, r26
 c6c:	e0 e8       	ldi	r30, 0x80	; 128
 c6e:	fe ef       	ldi	r31, 0xFE	; 254
 c70:	16 16       	cp	r1, r22
 c72:	17 06       	cpc	r1, r23
 c74:	e8 07       	cpc	r30, r24
 c76:	f9 07       	cpc	r31, r25
 c78:	c0 f0       	brcs	.+48     	; 0xcaa <__fp_cmp+0x46>
 c7a:	12 16       	cp	r1, r18
 c7c:	13 06       	cpc	r1, r19
 c7e:	e4 07       	cpc	r30, r20
 c80:	f5 07       	cpc	r31, r21
 c82:	98 f0       	brcs	.+38     	; 0xcaa <__fp_cmp+0x46>
 c84:	62 1b       	sub	r22, r18
 c86:	73 0b       	sbc	r23, r19
 c88:	84 0b       	sbc	r24, r20
 c8a:	95 0b       	sbc	r25, r21
 c8c:	39 f4       	brne	.+14     	; 0xc9c <__fp_cmp+0x38>
 c8e:	0a 26       	eor	r0, r26
 c90:	61 f0       	breq	.+24     	; 0xcaa <__fp_cmp+0x46>
 c92:	23 2b       	or	r18, r19
 c94:	24 2b       	or	r18, r20
 c96:	25 2b       	or	r18, r21
 c98:	21 f4       	brne	.+8      	; 0xca2 <__fp_cmp+0x3e>
 c9a:	08 95       	ret
 c9c:	0a 26       	eor	r0, r26
 c9e:	09 f4       	brne	.+2      	; 0xca2 <__fp_cmp+0x3e>
 ca0:	a1 40       	sbci	r26, 0x01	; 1
 ca2:	a6 95       	lsr	r26
 ca4:	8f ef       	ldi	r24, 0xFF	; 255
 ca6:	81 1d       	adc	r24, r1
 ca8:	81 1d       	adc	r24, r1
 caa:	08 95       	ret

00000cac <__udivmodqi4>:
 cac:	99 1b       	sub	r25, r25
 cae:	79 e0       	ldi	r23, 0x09	; 9
 cb0:	04 c0       	rjmp	.+8      	; 0xcba <__udivmodqi4_ep>

00000cb2 <__udivmodqi4_loop>:
 cb2:	99 1f       	adc	r25, r25
 cb4:	96 17       	cp	r25, r22
 cb6:	08 f0       	brcs	.+2      	; 0xcba <__udivmodqi4_ep>
 cb8:	96 1b       	sub	r25, r22

00000cba <__udivmodqi4_ep>:
 cba:	88 1f       	adc	r24, r24
 cbc:	7a 95       	dec	r23
 cbe:	c9 f7       	brne	.-14     	; 0xcb2 <__udivmodqi4_loop>
 cc0:	80 95       	com	r24
 cc2:	08 95       	ret

00000cc4 <__udivmodhi4>:
 cc4:	aa 1b       	sub	r26, r26
 cc6:	bb 1b       	sub	r27, r27
 cc8:	51 e1       	ldi	r21, 0x11	; 17
 cca:	07 c0       	rjmp	.+14     	; 0xcda <__udivmodhi4_ep>

00000ccc <__udivmodhi4_loop>:
 ccc:	aa 1f       	adc	r26, r26
 cce:	bb 1f       	adc	r27, r27
 cd0:	a6 17       	cp	r26, r22
 cd2:	b7 07       	cpc	r27, r23
 cd4:	10 f0       	brcs	.+4      	; 0xcda <__udivmodhi4_ep>
 cd6:	a6 1b       	sub	r26, r22
 cd8:	b7 0b       	sbc	r27, r23

00000cda <__udivmodhi4_ep>:
 cda:	88 1f       	adc	r24, r24
 cdc:	99 1f       	adc	r25, r25
 cde:	5a 95       	dec	r21
 ce0:	a9 f7       	brne	.-22     	; 0xccc <__udivmodhi4_loop>
 ce2:	80 95       	com	r24
 ce4:	90 95       	com	r25
 ce6:	bc 01       	movw	r22, r24
 ce8:	cd 01       	movw	r24, r26
 cea:	08 95       	ret

00000cec <_exit>:
 cec:	f8 94       	cli

00000cee <__stop_program>:
 cee:	ff cf       	rjmp	.-2      	; 0xcee <__stop_program>
